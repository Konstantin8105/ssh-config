package ssh_config

import "testing"

// RevokedHostKeys
//         Specifies revoked host public keys.  Keys listed in this file
//         will be refused for host authentication.  Note that if this
//         file does not exist or is not readable, then host authentica‚Äê
//         tion will be refused for all hosts.  Keys may be specified as a
//         text file, listing one public key per line, or as an OpenSSH
//         Key Revocation List (KRL) as generated by ssh-keygen(1).  For
//         more information on KRLs, see the KEY REVOCATION LISTS section
//         in ssh-keygen(1).
//

func TestRevokedHostKeysInitFunc(t *testing.T) {
	defer func() {
		if err := recover(); err != nil {
			t.Errorf("panic in test is not acceptable")
		}
	}()
	f, ok := mapInit[RevokedHostKeys]
	if !ok {
		t.Errorf("Cannot found init-function")
	}
	if f == nil {
		t.Errorf("Init-function is nil")
	}
	if f() == "" {
		// TODO
		t.Errorf("Not acceptable empty init value")
	}
}

func TestRevokedHostKeysValidFunc(t *testing.T) {
	defer func() {
		if err := recover(); err != nil {
			t.Errorf("panic in test is not acceptable")
		}
	}()
	f, ok := mapValid[RevokedHostKeys]
	if !ok {
		t.Errorf("Cannot found valid-function")
	}
	if f == nil {
		t.Errorf("Valid-function is nil")
	}
	if !f("") {
		// TODO
		t.Errorf("Not acceptable empty valid-value")
	}
}

func TestRevokedHostKeysParseFunc(t *testing.T) {
	defer func() {
		if err := recover(); err != nil {
			t.Errorf("panic in test is not acceptable")
		}
	}()
	f, ok := mapParse[RevokedHostKeys]
	if !ok {
		t.Errorf("Cannot found parse-function")
	}
	if f == nil {
		t.Errorf("Parse-function is nil")
	}
	// TODO
}
